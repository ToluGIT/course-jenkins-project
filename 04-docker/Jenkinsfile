
pipeline {
    agent any

    environment {
        IMAGE_NAME = 'toluid/tester'
        IMAGE_TAG = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                // Remove the jenkins-project directory if it exists
		sh 'rm -rf jenkins-project'
                sh 'rm -rf docker-test docker-test@tmp'
            }
        }

        stage('Checkout Code') {
            steps {   
                sh 'git clone https://github.com/ToluGIT/course-jenkins-project.git'
            }
        }

        stage('Set Up Environment') {
            steps {
                // Install libraries and packages required for build and tests
                sh 'pip install -r 04-docker/requirements.txt'
            }
        }

        stage('Unit Testing') {
            steps {
                // Use pytest for unit testing
		sh 'cd 04-docker/'
                sh 'pytest'
            }
        }

		stage('Login to DockerHub') {
			steps {
				withCredentials([
					string(credentialsId: 'dockerusr', variable: 'DOCKER_USER'),
					string(credentialsId: 'dockerpwd', variable: 'DOCKER_PASS')
				]) {
					sh '''
						docker login -u $DOCKER_USER -p $DOCKER_PASS
					'''
					echo 'Login successful'
				}
			}
		}

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image ${IMAGE_TAG}"
                    sh "docker build -t ${IMAGE_TAG} 04-docker/"
                }
            }
        }
		stage('Approval Required') {
					steps {
						script {
							def userInput = input(id: 'userInput', message: 'Approve and Provide docker image', parameters: [
								string(name: 'DOCKER_IMAGE', defaultValue: 'defaultValue', description: 'Enter the docker image')
							])
							env.DOCKER_IMAGE = userInput
						}
					}
				}

		stage('Deploy Docker Image') {
					steps {
						script {
							echo "Deploying Docker image ${env.DOCKER_IMAGE}"
							sh "docker run -d ${env.DOCKER_IMAGE}"
						}
					}
				}
    }
}
    
