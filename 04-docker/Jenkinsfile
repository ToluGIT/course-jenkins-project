pipeline {
    agent any

    environment {
        IMAGE_NAME = 'toluid/tester'
        IMAGE_TAG = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                sh 'rm -rf ${WORKSPACE}/*'
            }
        }

        stage('Checkout Code') {
            steps {
                sh 'git clone https://github.com/ToluGIT/course-jenkins-project.git'
            }
        }

        stage('Set Up Environment') {
            steps {
                sh 'pip install -r course-jenkins-project/04-docker/requirements.txt'
            }
        }

        stage('Unit Testing') {
            steps {
                sh 'cd course-jenkins-project/04-docker && pytest'
            }
        }

        stage('Login to DockerHub') {
            steps {
                withCredentials([
                    string(credentialsId: 'dockerusr', variable: 'DOCKER_USER'),
                    string(credentialsId: 'dockerpwd', variable: 'DOCKER_PASS')
                ]) {
                    sh '''
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    '''
                    echo 'Login successful'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image ${IMAGE_TAG}"
                    sh "docker build -t ${IMAGE_TAG} course-jenkins-project/04-docker/"
                }
            }
        }

        stage('Approval Required') {
            steps {
                script {
                    def userInput = input(
                        id: 'userInput', message: 'Approve and provide the Docker image tag', parameters: [
                            string(name: 'DOCKER_IMAGE', description: 'Enter the Docker image tag')
                        ]
                    )
                    env.DOCKER_IMAGE = "${IMAGE_NAME}:${userInput}"
                }
            }
        }

        stage('Deploy Docker Image') {
            steps {
                script {
                    echo "Deploying Docker image ${env.DOCKER_IMAGE}"
                    sh "docker run -d -p 80:80 ${env.DOCKER_IMAGE}"
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker containers...'
            sh 'docker ps -q | xargs -r docker stop'
            sh 'docker ps -aq | xargs -r docker rm'
        }
    }
}
